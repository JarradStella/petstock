-- And how many total Units of [ClassCode] of “CPRE” Products they have
-- purchased

-- 1a).Display the Top 10 [Customers] by Total Units Purchased.

-- Join sales and product data to eventually identify where customers purchases 'CACC' products as part of their initial sale
WITH table_1 AS (
    SELECT *
    FROM 'Sale.csv' AS sale
    INNER JOIN 'Product.csv' AS product
        ON sale.ProductKey = product.ProductKey
    ORDER BY sale.OrderKey ASC
),

purchase_order_rank AS (
    SELECT 
        *,
        RANK() OVER (PARTITION BY CustomerKey ORDER BY ServerDateTime ASC) AS OrderRank -- where rank is 1, it is the initial sale 
    FROM table_1
),

-- list of customers who had a 'CACC' item in their initial sale
cacc_customers AS (
	SELECT DISTINCT
    CustomerKey
FROM purchase_order_rank
WHERE OrderRank = 1 
    AND ClassCode = 'CACC'
ORDER BY CustomerKey ASC),

table_4 AS (
	SELECT 
	*
	FROM 'Sale.csv' sale2
	INNER JOIN cacc_customers 
		ON sale2.CustomerKey = cacc_customers.CustomerKey
	INNER JOIN 'Product.csv' AS product
		ON sale2.ProductKey = product.ProductKey),

top_10_customers AS (
	SELECT 
	table_4.CustomerKey,
		SUM(Quantity) AS total_units -- adding up all units purchased by customer
	FROM table_4
	GROUP BY table_4.CustomerKey
	ORDER BY total_units DESC
	LIMIT 10) -- to keep it to the top 10 customers by total_units
	
SELECT 
	top_10_customers.CustomerKey,
	top_10_customers.total_units,
	COUNT(DISTINCT table_4.ProductKey) AS count_unique_cpre_products,
	SUM(table_4.Quantity) AS total_cpre_units
FROM top_10_customers 
INNER JOIN table_4
	ON table_4.CustomerKey = top_10_customers.CustomerKey
WHERE table_4.ClassCode = 'CPRE'
GROUP BY 1, 2
ORDER BY total_units DESC;
